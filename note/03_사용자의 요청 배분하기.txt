
# 웹 서버는 사용자가 요청한 URL에 따라서 알맞은 처리로 안내해야 한다.
  Django에서는 urls.py에 설정한 대로 사용자의 요청을 배분할 수 있다.

# Request
    - 사용자가 URL을 통해 원하는 것을 요구하는 절차를 요청이라고 한다

# urls.py
    - 요청을 배분하는 역할을 하는 Django의 설정 파일이다

# View
    - 어떤 프로그램에서 사용자에게 최종적으로 보여지게 되는 화면
    - View에는 대체로 사용자가 보기 좋게끔 설계한 디자인이 들어가 있다
    - (웹 뿐만 아니라) 어떤 프로그램에서든 프로그래머가 디자인을 구현하는 부분을 View라고 부른다

# Function views (사용자의 요청을 처리 함수로 전달하는 방법)
    1. import문을 추가한다:  from my_app import views
    2. urlpatterns에 URL을 추가한다:  path('', views.home, name='home')

# Class-based views (사용자의 요청을 처리 클래스로 전달하는 방법)
    1. import문을 추가한다:  from other_app.views import Home
    2. urlpatterns에 URL을 추가한다:  path('', Home.as_view(), name='home')

# Including another URLconf (사용자의 요청을 다른 urls.py로 전달하는 방법)
    1. include() 함수를 Import 한다: from django.urls import include, path
    2. urlpatterns에 URL을 추가한다: path('blog/', include('blog.urls'))

# 연습문제
    1. http://localhost:8000/second/ 로 접속하면 '두 번째 앱 메인 페이지' 화면을 응답
    2. http://localhost:8000/second/news/ 로 접속하면 '두 번째 앱의 뉴스 메인 페이지' 화면을 응답
    3. http://localhost:8000/second/news/article1 -> '첫 번째 뉴스 기사' 화면을 응답
    4. http://localhost:8000/second/news/article2 -> '두 번째 뉴스 기사' 화면을 응답

# 팀 뷰어 혹은 스크린샷으로 검사 받기







