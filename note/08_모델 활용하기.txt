
# 데이터 모델 (MVC패턴 중 모델)
    - Django에서는 해당 앱에서 사용할 데이터의 형태를 models.py에 정의할 수 있다.
    - Django는 models.py에 정의된 모델 클래스를 활용하여 프로젝트를 간편하게 관리한다.
    - models.py는 프로그래머의 데이터베이스 관련 공부를 최소화 할 수 있도록 설계되어 있다.

# 데이터베이스 (Database, 데이터 창고)
    - 사업을 운영하는데 필요한 데이터들을 저장/검색/관리하는데에 특화된 프로그램
    - 대부분 다른 프로그램과 연동할 수 있도록 만들어져 있다.

# NO-SQL 데이터베이스
    - 관계를 통해 데이터를 다루기 귀찮아서 생긴 데이터베이스
    - 데이터를 마구 중복 저장하여 저장공간에 낭비가 발생하지만, 성능은 뛰어나다
    - 다양한 형태의 NO-SQL이 존재한다.
    - MongoDB, ...등

# 관계형 데이터베이스 (RDBMS, Relational DataBase Management System)
    - 테이블(표) 형태로 데이터를 다룬다.
    - 테이블간에 관계를 형성하여 데이터를 효율적으로 다룰 수 있다.
    - 쿼리문(질의문, SQL)을 이용해 데이터를 다룬다.
    - Oracle DB, MySQL, sqlite, MS-SQL, ... 등

# SQL (Structured Query Language)
    - 관계형 데이터베이스를 관리하기 위해 설계된 언어
    - SQL은 정형화된 표준이 있기 때문에 모든 관계형 데이터베이스들은 비슷한 명령어를 사용한다.

# 기본키 (Primary Key)
    - 하나의 행(row, tuple)을 유일하게 구분할 수 있는 컬럼(field)을 기본키라고 한다.
    - 해당 컬럼에 중복된 값이 없어야 하며, 비어있는 값(null)도 없어야 한다.
    - 하나의 테이블에는 하나의 기본키만 설정할 수 있다.
    - 기본키로 사용하기에 적합하지만, 기본키로 설정되지 않은 필드를 '후보키(Candidate Key)'라고 부른다.

# 외래키 (Foreign Key)
    - 다른 테이블과 관계를 형성하기 위해서는 다른 테이블의 기본키를 테이블의 필드로 포함시켜야 한다.
    - 다른 테이블에서는 기본키 역할이지만 현재 테이블에서는 중복을 허용하는 필드를 '외래키'라고 부른다.
    - 외래키로 설정한 필드에는 참조하는 필드에 존재하는 값만 추가할 수 있다.

# 작성된 모델을 통해 테이블 생성하기
    - python manage.py makemigrations : 작성한 모델을 이용해 테이블 설계서를 작성한다
    - python manage.py sqlmigrate first_app 0001
        : 작성된 마이그레이션을 통해 생성될 SQL문을 확인할 수 있다.
    - python manage.py migrate : 연결된 DB에 생성되어 있는 마이그레이션을 반영한다

# 생성된 테이블을 관리자 페이지로 관리하기
    - 프로젝트를 관리하기 위한 관리자 계정을 생성한다.
        python manage.py createsuperuser
    - admin.py에 관리하고 싶은 테이블의 모델을 등록한다.
        admin.site.register(ModelClass)

* 회사원 테이블

	사번	이름	    월급	    부서명  전화번호   이메일
	1   홍길동	1000	IT
	2	김철수	2000	IT
	3	김영희	3000	마케팅
	4	박민수	4000	IT
	5   김지안   1000    마케팅
	6   허리나   2000    컨설팅

* 부서 테이블

	부서명	주소
	IT	    서울특별시 종로구 묘동 돈화문로 26 kg아이티뱅크
	마케팅	서울특별시 동작구 장승배기로 171 노량진아이비빌딩 3층
	컨설팅   서울특별시...


# 연습문제: 회사원과 부서 같은 관계의 데이터를 테이블 형태로 만들어보세요






